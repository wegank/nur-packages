diff --git a/egl/wayland-egl-symbols-check b/egl/wayland-egl-symbols-check
index d04fd04..824b496 100755
--- a/egl/wayland-egl-symbols-check
+++ b/egl/wayland-egl-symbols-check
@@ -14,7 +14,7 @@ if ! test -n "$NM"; then
 	exit 99
 fi
 
-AVAIL_FUNCS="$($NM -D --format=bsd --defined-only $LIB | awk '{print $3}')"
+AVAIL_FUNCS="$($NM $LIB | awk '{print $3}')"
 
 # Official ABI, taken from the header.
 REQ_FUNCS="wl_egl_window_resize
@@ -37,7 +37,7 @@ if test -n "$NEW_ABI"; then
 fi
 
 REMOVED_ABI=$(echo "$REQ_FUNCS" | while read func; do
-    echo "$AVAIL_FUNCS" | grep -q "^$func$" && continue
+    echo "$AVAIL_FUNCS" | grep -q "^_$func$" && continue
 
     echo $func
 done)
diff --git a/meson.build b/meson.build
index 8bb47c2..cdd06ba 100644
--- a/meson.build
+++ b/meson.build
@@ -16,7 +16,7 @@ config_h.set_quoted('PACKAGE', meson.project_name())
 config_h.set_quoted('PACKAGE_VERSION', meson.project_version())
 
 cc_args = []
-if host_machine.system() != 'freebsd'
+if host_machine.system() != 'darwin'
 	cc_args += ['-D_POSIX_C_SOURCE=200809L']
 endif
 add_project_arguments(cc_args, language: 'c')
@@ -52,7 +52,7 @@ foreach f: have_funcs
 endforeach
 config_h.set10('HAVE_XUCRED_CR_PID', cc.has_member('struct xucred', 'cr_pid', prefix : '#include <sys/ucred.h>'))
 have_broken_msg_cmsg_cloexec = false
-if host_machine.system() == 'freebsd'
+if host_machine.system() == 'darwin'
 	have_broken_msg_cmsg_cloexec = not cc.compiles('''
 #include <sys/param.h> /* To get __FreeBSD_version. */
 #if __FreeBSD_version < 1300502 || \
@@ -69,7 +69,7 @@ endif
 config_h.set10('HAVE_BROKEN_MSG_CMSG_CLOEXEC', have_broken_msg_cmsg_cloexec)
 
 if get_option('libraries')
-	if host_machine.system() == 'freebsd'
+	if host_machine.system() == 'darwin'
 		# When building for FreeBSD, epoll(7) is provided by a userspace
 		# wrapper around kqueue(2).
 		epoll_dep = dependency('epoll-shim')
diff --git a/src/wayland-os.c b/src/wayland-os.c
index a9066ca..e136792 100644
--- a/src/wayland-os.c
+++ b/src/wayland-os.c
@@ -69,17 +69,39 @@ wl_os_socket_cloexec(int domain, int type, int protocol)
 {
 	int fd;
 
+#ifdef SOCK_CLOEXEC
 	fd = socket(domain, type | SOCK_CLOEXEC, protocol);
 	if (fd >= 0)
 		return fd;
 	if (errno != EINVAL)
 		return -1;
+#endif
 
 	fd = socket(domain, type, protocol);
 	return set_cloexec_or_close(fd);
 }
 
-#if defined(__FreeBSD__)
+int
+wl_os_socketpair_cloexec(int domain, int type, int protocol, int sv[2])
+{
+    int retval;
+
+#ifdef SOCK_CLOEXEC
+    retval = socketpair(domain, type | SOCK_CLOEXEC, protocol, sv);
+    if (retval >= 0)
+       return retval;
+    if (errno != EINVAL)
+       return -1;
+#endif
+
+    retval = socketpair(domain, type, protocol, sv);
+    if (set_cloexec_or_close(sv[0]) == -1 || set_cloexec_or_close(sv[1]) == -1)
+        retval = -1;
+
+    return retval;
+}
+
+#if defined(__APPLE__)
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
 {
diff --git a/src/wayland-os.h b/src/wayland-os.h
index 068fd2f..42e2800 100644
--- a/src/wayland-os.h
+++ b/src/wayland-os.h
@@ -32,6 +32,9 @@
 int
 wl_os_socket_cloexec(int domain, int type, int protocol);
 
+int
+wl_os_socketpair_cloexec(int domain, int type, int protocol, int sv[2]);
+
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid);
 
diff --git a/tests/client-test.c b/tests/client-test.c
index 960cfa9..a4ced33 100644
--- a/tests/client-test.c
+++ b/tests/client-test.c
@@ -59,7 +59,7 @@ TEST(client_destroy_listener)
 	struct client_destroy_listener a, b;
 	int s[2];
 
-	assert(socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX, SOCK_STREAM, 0, s) == 0);
 	display = wl_display_create();
 	assert(display);
 	client = wl_client_create(display, s[0]);
diff --git a/tests/connection-test.c b/tests/connection-test.c
index eea9287..cb70d19 100644
--- a/tests/connection-test.c
+++ b/tests/connection-test.c
@@ -48,7 +48,7 @@ setup(int *s)
 {
 	struct wl_connection *connection;
 
-	assert(socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX, SOCK_STREAM, 0, s) == 0);
 
 	connection = wl_connection_create(s[0]);
 	assert(connection);
@@ -181,8 +181,8 @@ struct marshal_data {
 static void
 setup_marshal_data(struct marshal_data *data)
 {
-	assert(socketpair(AF_UNIX,
-			  SOCK_STREAM | SOCK_CLOEXEC, 0, data->s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX,
+			  SOCK_STREAM, 0, data->s) == 0);
 	data->read_connection = wl_connection_create(data->s[0]);
 	assert(data->read_connection);
 	data->write_connection = wl_connection_create(data->s[1]);
@@ -837,7 +837,7 @@ TEST(request_bogus_size)
 	for (bogus_size = 11; bogus_size >= 0; bogus_size--) {
 		fprintf(stderr, "* bogus size %d\n", bogus_size);
 
-		assert(socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, s) == 0);
+		assert(wl_os_socketpair_cloexec(AF_UNIX, SOCK_STREAM, 0, s) == 0);
 		display = wl_display_create();
 		assert(display);
 		client = wl_client_create(display, s[0]);
diff --git a/tests/os-wrappers-test.c b/tests/os-wrappers-test.c
index 8d8c3ab..1c1dfaa 100644
--- a/tests/os-wrappers-test.c
+++ b/tests/os-wrappers-test.c
@@ -64,13 +64,11 @@ static int fall_back;
 */
 
 #define DECL(ret_type, func, ...) \
-	ret_type __interceptor_ ## func(__VA_ARGS__) __attribute__((weak)); \
 	static ret_type (*real_ ## func)(__VA_ARGS__);			\
 	static int wrapped_calls_ ## func;
 
-#define REAL(func) (__interceptor_ ## func) ?				\
-	__interceptor_ ## func :					\
-	(__typeof__(&__interceptor_ ## func))dlsym(RTLD_NEXT, #func)
+#define REAL(func) \
+	(__typeof__(real_ ## func))dlsym(RTLD_NEXT, #func)
 
 DECL(int, socket, int, int, int);
 DECL(int, fcntl, int, int, ...);
@@ -92,10 +90,12 @@ socket(int domain, int type, int protocol)
 {
 	wrapped_calls_socket++;
 
+#ifdef SOCK_CLOEXEC
 	if (fall_back && (type & SOCK_CLOEXEC)) {
 		errno = EINVAL;
 		return -1;
 	}
+#endif
 
 	return real_socket(domain, type, protocol);
 }
@@ -141,10 +141,12 @@ recvmsg(int sockfd, struct msghdr *msg, int flags)
 {
 	wrapped_calls_recvmsg++;
 
+#ifndef HAVE_BROKEN_MSG_CMSG_CLOEXEC
 	if (fall_back && (flags & MSG_CMSG_CLOEXEC)) {
 		errno = EINVAL;
 		return -1;
 	}
+#endif
 
 	return real_recvmsg(sockfd, msg, flags);
 }
@@ -179,7 +181,11 @@ do_os_wrappers_socket_cloexec(int n)
 	 * Must have 2 calls if falling back, but must also allow
 	 * falling back without a forced fallback.
 	 */
+#ifndef HAVE_BROKEN_MSG_CMSG_CLOEXEC
 	assert(wrapped_calls_socket > n);
+#else
+	assert(wrapped_calls_socket == 1);
+#endif
 
 	exec_fd_leak_check(nr_fds);
 }
@@ -219,7 +225,11 @@ do_os_wrappers_dupfd_cloexec(int n)
 	 * Must have 4 calls if falling back, but must also allow
 	 * falling back without a forced fallback.
 	 */
+#ifdef SOCK_CLOEXEC
 	assert(wrapped_calls_fcntl > n);
+#else
+	assert(wrapped_calls_fcntl == 0);
+#endif
 
 	exec_fd_leak_check(nr_fds);
 }
@@ -253,8 +263,8 @@ struct marshal_data {
 static void
 setup_marshal_data(struct marshal_data *data)
 {
-	assert(socketpair(AF_UNIX,
-			  SOCK_STREAM | SOCK_CLOEXEC, 0, data->s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX,
+			  SOCK_STREAM, 0, data->s) == 0);
 
 	data->read_connection = wl_connection_create(data->s[0]);
 	assert(data->read_connection);
diff --git a/tests/resources-test.c b/tests/resources-test.c
index fa6ba2b..02f913c 100644
--- a/tests/resources-test.c
+++ b/tests/resources-test.c
@@ -40,7 +40,7 @@ TEST(create_resource_tst)
 	int s[2];
 	uint32_t id;
 
-	assert(socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX, SOCK_STREAM, 0, s) == 0);
 	display = wl_display_create();
 	assert(display);
 	client = wl_client_create(display, s[0]);
@@ -111,7 +111,7 @@ TEST(destroy_res_tst)
 		.notify = &destroy_notify
 	};
 
-	assert(socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX, SOCK_STREAM, 0, s) == 0);
 	display = wl_display_create();
 	assert(display);
 	client = wl_client_create(display, s[0]);
@@ -159,7 +159,7 @@ TEST(create_resource_with_same_id)
 	int s[2];
 	uint32_t id;
 
-	assert(socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, s) == 0);
+	assert(wl_os_socketpair_cloexec(AF_UNIX, SOCK_STREAM, 0, s) == 0);
 	display = wl_display_create();
 	assert(display);
 	client = wl_client_create(display, s[0]);
diff --git a/tests/test-runner.c b/tests/test-runner.c
index d07dab1..71f220a 100644
--- a/tests/test-runner.c
+++ b/tests/test-runner.c
@@ -63,7 +63,8 @@ static int timeouts_enabled = 1;
 /* set to one if the output goes to the terminal */
 static int is_atty = 0;
 
-extern const struct test __start_test_section, __stop_test_section;
+extern const struct test __start_test_section __asm("section$start$__RODATA$test_section");
+extern const struct test __stop_test_section __asm("section$end$__RODATA$test_section");
 
 static const struct test *
 find_test(const char *name)
@@ -320,7 +321,7 @@ int main(int argc, char *argv[])
 	if (isatty(fileno(stderr)))
 		is_atty = 1;
 
-	if (is_debugger_attached()) {
+	if (0) {
 		fd_leak_check_enabled = 0;
 		timeouts_enabled = 0;
 	} else {
diff --git a/tests/test-runner.h b/tests/test-runner.h
index d073400..8c977f0 100644
--- a/tests/test-runner.h
+++ b/tests/test-runner.h
@@ -41,7 +41,7 @@ struct test {
 	static void name(void);						\
 									\
 	const struct test test##name					\
-		 __attribute__ ((used, section ("test_section"))) = {	\
+		 __attribute__ ((used, section ("__RODATA,test_section"))) = {	\
 		#name, name, 0						\
 	};								\
 									\
@@ -51,7 +51,7 @@ struct test {
 	static void name(void);						\
 									\
 	const struct test test##name					\
-		 __attribute__ ((used, section ("test_section"))) = {	\
+		 __attribute__ ((used, section ("__RODATA,test_section"))) = {	\
 		#name, name, 1						\
 	};								\
 									\
