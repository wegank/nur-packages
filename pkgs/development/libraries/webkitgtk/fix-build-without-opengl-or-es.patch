diff --git a/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp b/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp
index 32c82b899b30..19b1c0e7ef82 100644
--- a/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp
+++ b/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp
@@ -141,7 +141,7 @@ void DrawingAreaProxyCoordinatedGraphics::setBackingStoreIsDiscardable(bool isBa
 #endif
 }
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
 void DrawingAreaProxyCoordinatedGraphics::adjustTransientZoom(double scale, FloatPoint origin)
 {
     send(Messages::DrawingArea::AdjustTransientZoom(scale, origin));
diff --git a/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.h b/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.h
index f3dfe6614bad..1333e9f3a9ab 100644
--- a/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.h
+++ b/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.h
@@ -57,7 +57,7 @@ private:
     void waitForBackingStoreUpdateOnNextPaint() override;
     void setBackingStoreIsDiscardable(bool) override;
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     void adjustTransientZoom(double scale, WebCore::FloatPoint origin) override;
     void commitTransientZoom(double scale, WebCore::FloatPoint origin) override;
 #endif
diff --git a/Source/WebKit/UIProcess/ViewGestureController.cpp b/Source/WebKit/UIProcess/ViewGestureController.cpp
index 106e11033107..c160f2abc576 100644
--- a/Source/WebKit/UIProcess/ViewGestureController.cpp
+++ b/Source/WebKit/UIProcess/ViewGestureController.cpp
@@ -686,8 +686,10 @@ void ViewGestureController::applyMagnification()
 
     if (m_frameHandlesMagnificationGesture)
         m_webPageProxy.scalePage(m_magnification, roundedIntPoint(m_magnificationOrigin));
+#if USE(COORDINATED_GRAPHICS)
     else
         m_webPageProxy.drawingArea()->adjustTransientZoom(m_magnification, scaledMagnificationOrigin(m_magnificationOrigin, m_magnification));
+#endif
 }
 
 void ViewGestureController::endMagnificationGesture()
@@ -700,8 +702,10 @@ void ViewGestureController::endMagnificationGesture()
     if (m_frameHandlesMagnificationGesture)
         m_webPageProxy.scalePage(newMagnification, roundedIntPoint(m_magnificationOrigin));
     else {
+#if USE(COORDINATED_GRAPHICS)
         if (auto drawingArea = m_webPageProxy.drawingArea())
             drawingArea->commitTransientZoom(newMagnification, scaledMagnificationOrigin(m_magnificationOrigin, newMagnification));
+#endif
     }
 
 #if PLATFORM(MAC)
diff --git a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.cpp b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.cpp
index 6bc7442b28ed..09562a267b52 100644
--- a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.cpp
+++ b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.cpp
@@ -487,7 +487,7 @@ void DrawingAreaCoordinatedGraphics::didUpdate()
     displayTimerFired();
 }
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
 void DrawingAreaCoordinatedGraphics::adjustTransientZoom(double scale, FloatPoint origin)
 {
     if (!m_transientZoom) {
@@ -620,7 +620,7 @@ void DrawingAreaCoordinatedGraphics::resumePainting()
 
 void DrawingAreaCoordinatedGraphics::enterAcceleratedCompositingMode(GraphicsLayer* graphicsLayer)
 {
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     if (!m_alwaysUseCompositing) {
         m_webPage.corePage()->settings().setForceCompositingMode(true);
         m_alwaysUseCompositing = true;
diff --git a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.h b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.h
index dbef3656802c..aebc1707e33d 100644
--- a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.h
+++ b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/DrawingAreaCoordinatedGraphics.h
@@ -85,7 +85,7 @@ private:
     void targetRefreshRateDidChange(unsigned rate) override;
     void didUpdate() override;
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     void adjustTransientZoom(double scale, WebCore::FloatPoint origin) override;
     void commitTransientZoom(double scale, WebCore::FloatPoint origin) override;
 #endif
@@ -157,7 +157,7 @@ private:
 
     RunLoop::Timer<DrawingAreaCoordinatedGraphics> m_displayTimer;
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     bool m_transientZoom { false };
     WebCore::FloatPoint m_transientZoomInitialOrigin;
 #endif
diff --git a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.cpp b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.cpp
index 60d596ec08c0..a22d2ff8e92b 100644
--- a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.cpp
+++ b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.cpp
@@ -147,7 +147,7 @@ void LayerTreeHost::layerFlushTimerFired()
         m_coordinator.forceFrameSync();
 
     OptionSet<FinalizeRenderingUpdateFlags> flags;
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     if (!m_transientZoom)
         flags.add(FinalizeRenderingUpdateFlags::ApplyScrollingTreeLayerPositions);
 #else
@@ -156,7 +156,7 @@ void LayerTreeHost::layerFlushTimerFired()
 
     bool didSync = m_coordinator.flushPendingLayerChanges(flags);
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     // If we have an active transient zoom, we want the zoom to win over any changes
     // that WebCore makes to the relevant layers, so re-apply our changes after flushing.
     if (m_transientZoom)
@@ -204,7 +204,7 @@ void LayerTreeHost::forceRepaint()
 
     if (!m_isWaitingForRenderer) {
         OptionSet<FinalizeRenderingUpdateFlags> flags;
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
         if (!m_transientZoom)
             flags.add(FinalizeRenderingUpdateFlags::ApplyScrollingTreeLayerPositions);
 #else
@@ -458,7 +458,7 @@ void LayerTreeHost::renderNextFrame(bool forceRepaint)
     }
 }
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
 FloatPoint LayerTreeHost::constrainTransientZoomOrigin(double scale, FloatPoint origin) const
 {
     FrameView& frameView = *m_webPage.mainFrameView();
diff --git a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.h b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.h
index 293c2e5de26e..344723548f10 100644
--- a/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.h
+++ b/Source/WebKit/WebProcess/WebPage/CoordinatedGraphics/LayerTreeHost.h
@@ -37,7 +37,7 @@
 #include <wtf/Forward.h>
 #include <wtf/OptionSet.h>
 #include <wtf/RunLoop.h>
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
 #include <WebCore/CoordinatedGraphicsLayer.h>
 #endif
 
@@ -101,7 +101,7 @@ public:
 
     WebCore::PlatformDisplayID displayID() const { return m_displayID; }
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     void adjustTransientZoom(double, WebCore::FloatPoint);
     void commitTransientZoom(double, WebCore::FloatPoint);
 #endif
@@ -127,7 +127,7 @@ private:
     void requestDisplayRefreshMonitorUpdate();
     void handleDisplayRefreshMonitorUpdate(bool);
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     WebCore::FloatPoint constrainTransientZoomOrigin(double, WebCore::FloatPoint) const;
     WebCore::CoordinatedGraphicsLayer* layerForTransientZoom() const;
     void applyTransientZoomToLayers(double, WebCore::FloatPoint);
@@ -214,7 +214,7 @@ private:
 #endif // USE(COORDINATED_GRAPHICS)
     WebCore::PlatformDisplayID m_displayID;
 
-#if PLATFORM(GTK)
+#if PLATFORM(GTK) && USE(COORDINATED_GRAPHICS)
     bool m_transientZoom { false };
     double m_transientZoomScale { 1 };
     WebCore::FloatPoint m_transientZoomOrigin;
